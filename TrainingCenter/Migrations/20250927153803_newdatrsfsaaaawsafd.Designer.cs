// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingCenter.Data;

#nullable disable

namespace TrainingCenter.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250927153803_newdatrsfsaaaawsafd")]
    partial class newdatrsfsaaaawsafd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrainingCenter.Models.CourseCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeAdvancedCourse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeFoundationalCourse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("courseCodes");
                });

            modelBuilder.Entity("TrainingCenter.Models.ExamAdvancce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExamAdvancces");
                });

            modelBuilder.Entity("TrainingCenter.Models.ExamFoundational", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("examFoundationals");
                });

            modelBuilder.Entity("TrainingCenter.Models.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExamAdvancceId")
                        .HasColumnType("int");

                    b.Property<int?>("ExamFoundationalsId")
                        .HasColumnType("int");

                    b.Property<int?>("Exam_Advnv")
                        .HasColumnType("int");

                    b.Property<int?>("Exam_Found")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamAdvancceId");

                    b.HasIndex("ExamFoundationalsId");

                    b.ToTable("examTypes");
                });

            modelBuilder.Entity("TrainingCenter.Models.LectuerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LectuerAdvan")
                        .HasColumnType("int");

                    b.Property<int?>("LectuerFound")
                        .HasColumnType("int");

                    b.Property<int>("Lectuer_AdvanId")
                        .HasColumnType("int");

                    b.Property<int?>("Lectuer_FoundId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Lectuer_AdvanId");

                    b.HasIndex("Lectuer_FoundId");

                    b.ToTable("lectuerTypes");
                });

            modelBuilder.Entity("TrainingCenter.Models.Lectuer_Advan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("lectuer_Advans");
                });

            modelBuilder.Entity("TrainingCenter.Models.Lectuer_found", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("lectuer_Founds");
                });

            modelBuilder.Entity("TrainingCenter.Models.SubjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Subject_FondationalsId")
                        .HasColumnType("int");

                    b.Property<int?>("Subjects_AdvancesId")
                        .HasColumnType("int");

                    b.Property<int?>("Subjects_fond")
                        .HasColumnType("int");

                    b.Property<int?>("subject_Adv")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Subject_FondationalsId");

                    b.HasIndex("Subjects_AdvancesId");

                    b.ToTable("subjectTypes");
                });

            modelBuilder.Entity("TrainingCenter.Models.Subject_Advance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LectuerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Lectuer_type_id")
                        .HasColumnType("int");

                    b.Property<int?>("examstype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("LectuerTypeId");

                    b.ToTable("subject_Advances");
                });

            modelBuilder.Entity("TrainingCenter.Models.Subject_Fondational", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LectuerTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Lectuer_type_id")
                        .HasColumnType("int");

                    b.Property<int?>("examstype")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("LectuerTypeId");

                    b.ToTable("subject_Fondationals");
                });

            modelBuilder.Entity("TrainingCenter.Models.TrainingCenterCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("trainingCenterCourses");
                });

            modelBuilder.Entity("TrainingCenter.Models.ExamType", b =>
                {
                    b.HasOne("TrainingCenter.Models.ExamAdvancce", "ExamAdvancce")
                        .WithMany()
                        .HasForeignKey("ExamAdvancceId");

                    b.HasOne("TrainingCenter.Models.ExamFoundational", "ExamFoundationals")
                        .WithMany()
                        .HasForeignKey("ExamFoundationalsId");

                    b.Navigation("ExamAdvancce");

                    b.Navigation("ExamFoundationals");
                });

            modelBuilder.Entity("TrainingCenter.Models.LectuerType", b =>
                {
                    b.HasOne("TrainingCenter.Models.Lectuer_Advan", "Lectuer_Advan")
                        .WithMany()
                        .HasForeignKey("Lectuer_AdvanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingCenter.Models.Lectuer_found", "Lectuer_Found")
                        .WithMany()
                        .HasForeignKey("Lectuer_FoundId");

                    b.Navigation("Lectuer_Advan");

                    b.Navigation("Lectuer_Found");
                });

            modelBuilder.Entity("TrainingCenter.Models.SubjectType", b =>
                {
                    b.HasOne("TrainingCenter.Models.Subject_Fondational", "Subject_Fondationals")
                        .WithMany()
                        .HasForeignKey("Subject_FondationalsId");

                    b.HasOne("TrainingCenter.Models.Subject_Advance", "Subjects_Advances")
                        .WithMany()
                        .HasForeignKey("Subjects_AdvancesId");

                    b.Navigation("Subject_Fondationals");

                    b.Navigation("Subjects_Advances");
                });

            modelBuilder.Entity("TrainingCenter.Models.Subject_Advance", b =>
                {
                    b.HasOne("TrainingCenter.Models.ExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId");

                    b.HasOne("TrainingCenter.Models.LectuerType", "LectuerType")
                        .WithMany()
                        .HasForeignKey("LectuerTypeId");

                    b.Navigation("ExamType");

                    b.Navigation("LectuerType");
                });

            modelBuilder.Entity("TrainingCenter.Models.Subject_Fondational", b =>
                {
                    b.HasOne("TrainingCenter.Models.ExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId");

                    b.HasOne("TrainingCenter.Models.LectuerType", "LectuerType")
                        .WithMany()
                        .HasForeignKey("LectuerTypeId");

                    b.Navigation("ExamType");

                    b.Navigation("LectuerType");
                });
#pragma warning restore 612, 618
        }
    }
}
